apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    ndkVersion "21.3.6528147"
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            ndkBuild {
                targets 'jnifoo', 'execbar', 'execbaz'
            }
        }
    }
    buildTypes {
        debug {
            jniDebuggable true
            debuggable = true
            ndk {
                abiFilters = baseAbis
            }
        }
        release {
            jniDebuggable false
            debuggable = false
            ndk {
                abiFilters = baseAbis
            }
        }
    }
    externalNativeBuild {
        ndkBuild {
            path "src/main/cpp/Android.mk"
        }
    }
}

android.libraryVariants.all { variant ->
    def variantName = variant.name.capitalize()
    def defMergeJniTask = project.tasks["merge${variantName}NativeLibs"]
    def defStripTask = project.tasks["strip${variantName}DebugSymbols"]
    def intermedDirPath = "$project.buildDir.absolutePath/intermediates"
    // <module>/build/intermediates/ndkBuild/debug/obj/local
    def objDirPath = "$intermedDirPath/ndkBuild/$variant.dirName/obj/local"
    // <module>/build/intermediates/merged_native_libs/debug/out/lib
    def mergedDirPath = "$intermedDirPath/merged_native_libs/$variant.dirName/out/lib"

    def copyExecsTaskName = "unzenCopyExecsForStrip${variantName}"
    def copyExecsTask = tasks.create(name: copyExecsTaskName, type: Copy) {
        from objDirPath
        into mergedDirPath
        baseAbis.each { abi ->
            // Android Gradle builder is ignoring subdirs inside ABI dirs, so don't use them.
            include "$abi/execbar"
            include "$abi/execbaz"
        }
        includeEmptyDirs = false
    }
    // Without dependency defMergeJniTask will overwrite our work in mergedDirPath
    copyExecsTask.dependsOn defMergeJniTask
    defStripTask.dependsOn copyExecsTask
    if (!packAllElfsAsSo) {
        project.tasks["process${variantName}JavaRes"].dependsOn defStripTask
    }
}

task cppVersions {
    File header = file('src/main/cpp/global_version.h')
    inputs.property('globalVersion', baseVersion)
    outputs.file header
    doLast {
        String template = "#ifndef %s%n#define %s%n%n#define %s \"%s\"%n%n#endif // %s"
        def name = "GLOBAL_VERSION"
        def guard = "_GLOBAS_VERSION_H_"
        def version = 'UNZEN-VERSION-' + baseVersion
        header.write(String.format(template, guard, guard, name, version, guard))
    }
}
preBuild.dependsOn cppVersions
