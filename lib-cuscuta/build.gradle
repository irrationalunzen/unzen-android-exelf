apply plugin: 'com.android.library'

android {
    compileSdkVersion exelfCompileSdkVersion
    ndkVersion exelfNdkVersion
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion exelfTargetSdkVersion
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            ndkBuild {
                targets 'jnifoo', 'exebar', 'exebaz'
            }
        }
    }
    buildTypes {
        debug {
            jniDebuggable true
            debuggable = true
            ndk {
                abiFilters = baseAbis
            }
        }
        release {
            jniDebuggable false
            debuggable = false
            ndk {
                abiFilters = baseAbis
            }
        }
    }
    externalNativeBuild {
        ndkBuild {
            path "src/main/cpp/Android.mk"
        }
    }
}

android.libraryVariants.all { variant ->
    // 1. Android Gradle builder gather solibs in merged_native_libs dir and then
    // performs stripping on them that places stripped solibs in stripped_native_libs.
    // You can see this by search in task execution log for forementioned dirs and
    // see that stripping task runs after merge task.
    // 2. When project contains modules, they responsible for stripping their solibs
    // on their own. You can search app build dir for solib names and you'll see that
    // it contains only already stripped versions of solibs from modules that app
    // depends on. However, strippend solibs from modules are copied in app's
    // merged_native_libs dir, so app will redurantly run stripping on them second time.
    def variantName = variant.name.capitalize()
    def defMergeJniTask = project.tasks["merge${variantName}NativeLibs"]
    def defStripTask = project.tasks["strip${variantName}DebugSymbols"]
    def intermedDirPath = "$project.buildDir.absolutePath/intermediates"
    // <module>/build/intermediates/ndkBuild/debug/obj/local
    def objDirPath = "$intermedDirPath/ndkBuild/$variant.dirName/obj/local"
    // <module>/build/intermediates/merged_native_libs/debug/out/lib
    def mergedDirPath = "$intermedDirPath/merged_native_libs/$variant.dirName/out/lib"

    def copyExesTaskName = "unzenCopyExesForStrip${variantName}"
    def copyExesTask = tasks.create(name: copyExesTaskName, type: Copy) {
        from objDirPath
        into mergedDirPath
        baseAbis.each { abi ->
            // Android Gradle builder is ignoring subdirs inside ABI dirs, so don't use them.
            include "$abi/exebar"
            include "$abi/exebaz"
        }
        // On debug app builds Android OS installs from APK arbitrary named binaries,
        // but on release build it ignores everything except files named like SO libs.
        rename '(.+)', 'lib$1.so'
        includeEmptyDirs = false
    }
    // Without dependency defMergeJniTask will overwrite our work in mergedDirPath
    copyExesTask.dependsOn defMergeJniTask
    defStripTask.dependsOn copyExesTask
}

task cppVersions {
    File header = file('src/main/cpp/global_version.h')
    inputs.property('globalVersion', baseVersion)
    outputs.file header
    doLast {
        String template = "#ifndef %s%n#define %s%n%n#define %s \"%s\"%n%n#endif // %s"
        def name = "GLOBAL_VERSION"
        def guard = "_GLOBAS_VERSION_H_"
        def version = 'UNZEN-VERSION-' + baseVersion
        header.write(String.format(template, guard, guard, name, version, guard))
    }
}
preBuild.dependsOn cppVersions
