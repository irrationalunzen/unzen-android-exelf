apply plugin: 'com.android.library'

def abis = ['armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64']

android {
    compileSdkVersion 28
    buildToolsVersion "29.0.0"
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            ndkBuild {
                targets 'jnifoo', 'execbar', 'execbaz'
            }
        }
    }
    buildTypes {
        release {
            jniDebuggable false
            debuggable = false
        }
    }
    buildTypes {
        debug {
            jniDebuggable true
            debuggable = true
            ndk {
                abiFilters = abis
            }
        }
        release {
            jniDebuggable false
            debuggable = false
            ndk {
                abiFilters = abis
            }
        }
    }
    externalNativeBuild {
        ndkBuild {
            path "src/main/cpp/Android.mk"
        }
    }
}

android.libraryVariants.all { variant ->
    def packStripped = true
    def packNotstrip = true
    def srcAssetsDirPath = 'src/main/assets'
    def assetsStrippedDirName = 'exec-stripped'
    def assetsNotstripDirName = 'exec-notstrip'

    def taskSuffix = variant.name.capitalize()
    def defNativeBuildTask = project.tasks['externalNativeBuild' + taskSuffix]
    def defMergeJniTask = project.tasks['transformNativeLibsWithMergeJniLibsFor' + taskSuffix]
    def defStripTask = project.tasks['transformNativeLibsWithStripDebugSymbolFor' + taskSuffix]

    def defGenerateAssetsTask = project.tasks['generate' + taskSuffix + 'Assets']
    def defPackageAssetsTask = project.tasks['package' + taskSuffix + 'Assets']
    // Doesn't runs in lib-cppmodule. Runs in app module after lib-cppmodule module have completed
    // generateVariantAssets and packageVariantAssets.
    def defMergeAssetsTask = project.tasks['merge' + taskSuffix + 'Assets']

    def modulePath = projectDir.absolutePath
    def intermediatesDir = "$project.buildDir.absolutePath/intermediates/"
    // <module>/build/intermediates/ndkBuild/debug/obj/local
    def objDir = intermediatesDir + 'ndkBuild/' + variant.dirName + '/obj/local'
    def transformsDir = intermediatesDir + 'transforms/'
    def magicPath = '/0/lib'
    // <module>/build/intermediates/transforms/mergeJniLibs/debug/0/lib
    def mergeDir = transformsDir + 'mergeJniLibs/' + variant.dirName + magicPath
    // <module>/build/intermediates/transforms/stripDebugSymbol/debug/0/lib
    def stripDir = transformsDir + 'stripDebugSymbol/' + variant.dirName + magicPath
    // <module>/build/intermediates/merged_assets/debug/mergeDebugAssets/out/${assetsDirName}
    //def assetsDir = "${intermediatesDir}merged_assets/${assetsDirSuffix}"
    def assetsStrippedDir = "$modulePath/$srcAssetsDirPath/${assetsStrippedDirName}"
    def assetsNotstripDir = "$modulePath/$srcAssetsDirPath/${assetsNotstripDirName}"

    defStripTask.outputs.upToDateWhen { false }
    defStripTask.doLast {
        delete(assetsStrippedDir)
        delete(assetsNotstripDir)
    }

    abis.each { abi ->
        def myPrepareForStripTaskName = "prepareExecForStrip${taskSuffix}-${abi}"
        def myPrepareForStripTask = tasks.create(name: myPrepareForStripTaskName, type: Copy) {
            from objDir
            into mergeDir
            include abi + '/execbar'
            include abi + '/execbaz'
            includeEmptyDirs = false
        }
        myPrepareForStripTask.dependsOn defMergeJniTask
        defStripTask.dependsOn myPrepareForStripTask

        if (packStripped) {
            def strippedToAssetsTaskName = "copyStrippedExecToAssets${taskSuffix}-${abi}"
            def strippedToAssetsTask = tasks.create(name: strippedToAssetsTaskName, type: Copy) {
                from stripDir
                into assetsStrippedDir
                include abi + '/execbar'
                include abi + '/execbaz'
                includeEmptyDirs = false
            }
            strippedToAssetsTask.dependsOn defNativeBuildTask
            strippedToAssetsTask.dependsOn defStripTask
            defGenerateAssetsTask.dependsOn strippedToAssetsTask
        }
        if (packNotstrip) {
            def notstripToAssetsTaskName = "copyNotstripExecToAssets${taskSuffix}-${abi}"
            def notstripToAssetsTask = tasks.create(name: notstripToAssetsTaskName, type: Copy) {
                from objDir
                into assetsNotstripDir
                include abi + '/execbar'
                include abi + '/execbaz'
                includeEmptyDirs = false
            }
            notstripToAssetsTask.dependsOn defNativeBuildTask
            // If not depend on defStripTask, than defStripTask will run after and delete our work
            notstripToAssetsTask.dependsOn defStripTask
            defGenerateAssetsTask.dependsOn notstripToAssetsTask
        }
    }
}

task cppVersions {
    File header = file('src/main/cpp/global_version.h')
    inputs.property('globalVersion', globalVersion)
    outputs.file header
    doLast {
        String template = "#ifndef %s%n#define %s%n%n#define %s \"%s\"%n%n#endif // %s"
        def name = "GLOBAL_VERSION"
        def guard = "_GLOBAS_VERSION_H_"
        def version = 'UNZEN-VERSION-' + globalVersion
        header.write(String.format(template, guard, guard, name, version, guard))
    }
}
preBuild.dependsOn cppVersions
