apply plugin: 'com.android.library'

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            ndkBuild {
                targets 'jnifoo', 'execbar', 'execbaz'
            }
        }
    }
    buildTypes {
        debug {
            jniDebuggable true
            debuggable = true
            ndk {
                abiFilters = baseAbis
            }
        }
        release {
            jniDebuggable false
            debuggable = false
            ndk {
                abiFilters = baseAbis
            }
        }
    }
    externalNativeBuild {
        ndkBuild {
            path "src/main/cpp/Android.mk"
        }
    }
}

android.libraryVariants.all { variant ->
    def taskSuffix = variant.name.capitalize()
    def defMergeJniTask = project.tasks['transformNativeLibsWithMergeJniLibsFor' + taskSuffix]
    def defStripTask = project.tasks['transformNativeLibsWithStripDebugSymbolFor' + taskSuffix]
    def defGenerateAssetsTask = project.tasks['generate' + taskSuffix + 'Assets']
    def defPackageAssetsTask = project.tasks['package' + taskSuffix + 'Assets']

    def intermediatesDirPath = "$project.buildDir.absolutePath/intermediates"
    // <module>/build/intermediates/ndkBuild/debug/obj/local
    def objDirPath = "$intermediatesDirPath/ndkBuild/$variant.dirName/obj/local"
    // <module>/build/intermediates/transforms/mergeJniLibs/debug/0/lib
    def mergeDirPath = "$intermediatesDirPath/transforms/mergeJniLibs/$variant.dirName/0/lib"

    baseAbis.each { abi ->
        def myPrepareForStripTaskName = "prepareExecForStrip${taskSuffix}-${abi}"
        def myPrepareForStripTask = tasks.create(name: myPrepareForStripTaskName, type: Copy) {
            from objDirPath
            into mergeDirPath
            include abi + '/execbar'
            include abi + '/execbaz'
            includeEmptyDirs = false
        }
        // Required, because without dependency defMergeJniTask will overwrite our work in
        // mergeDirPath
        myPrepareForStripTask.dependsOn defMergeJniTask
        defStripTask.dependsOn myPrepareForStripTask
        defPackageAssetsTask.dependsOn defStripTask
    }
    defStripTask.outputs.upToDateWhen { false }
}

task cppVersions {
    File header = file('src/main/cpp/global_version.h')
    inputs.property('globalVersion', baseVersion)
    outputs.file header
    doLast {
        String template = "#ifndef %s%n#define %s%n%n#define %s \"%s\"%n%n#endif // %s"
        def name = "GLOBAL_VERSION"
        def guard = "_GLOBAS_VERSION_H_"
        def version = 'UNZEN-VERSION-' + baseVersion
        header.write(String.format(template, guard, guard, name, version, guard))
    }
}
preBuild.dependsOn cppVersions
