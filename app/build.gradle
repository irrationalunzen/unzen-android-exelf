apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    ndkVersion "21.3.6528147"
    defaultConfig {
        applicationId "unzen.bias"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode baseVersion
        versionName "$baseVersion"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.debug
        buildConfigField("int", "BASE_VERSION_CODE", "$baseVersion")
    }
    buildTypes {
        debug {
            versionNameSuffix "D"
            minifyEnabled false
        }
        release {
            versionNameSuffix "R"
            minifyEnabled false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "abi"

    productFlavors {
        x64 {
            versionCode 4 + android.defaultConfig.versionCode
            versionName "$versionCode+X64"
            ndk {
                abiFilters "x86_64"
            }
            ext {
                abis = ["x86_64"]
            }
        }
        x32 {
            versionCode 3 + android.defaultConfig.versionCode
            versionName "$versionCode+X32"
            ndk {
                abiFilters "x86"
            }
            ext {
                abis = ["x86"]
            }
        }
        a64 {
            versionCode 2 + android.defaultConfig.versionCode
            versionName "$versionCode+A64"
            ndk {
                abiFilters "arm64-v8a"
            }
            ext {
                abis = ["arm64-v8a"]
            }
        }
        a32 {
            versionCode 1 + android.defaultConfig.versionCode
            versionName "$versionCode+A32"
            ndk {
                abiFilters "armeabi-v7a"
            }
            ext {
                abis = ["armeabi-v7a"]
            }
        }
        fat {
            versionCode android.defaultConfig.versionCode
            versionName "$versionCode+FAT"
            ndk {
                abiFilters = baseAbis
            }
            ext {
                abis = baseAbis
            }
        }
    }
    variantFilter { variant ->
        def names = variant.flavors*.name
        if (variant.buildType.name != "release" && !names.contains("fat")) {
            setIgnore(true)
        }
    }
}

android.applicationVariants.all { variant ->
    // 1. Android Gradle builder gather solibs in merged_native_libs dir and then
    // performs stripping on them that places stripped solibs in stripped_native_libs.
    // You can see this by search in task execution log for forementioned dirs and
    // see that stripping task runs after merge task.
    // 2. When project contains modules, they responsible for stripping their solibs
    // on their own. You can search app build dir for solib names and you'll see that
    // it contains only already stripped versions of solibs from modules that app
    // depends on. However, strippend solibs from modules are copied in app's
    // merged_native_libs dir, so app will redurantly run stripping on them second time.
    def variantName = variant.name.capitalize()
    def buildTypeName = variant.getBuildType().name
    // Prepare input dir path
    def intermedLibDirPath = rootDir.absolutePath + "/lib-cuscuta/build/intermediates"
    // <module>/build/intermediates/stripped_native_libs/<variant>/out/lib
    def strippedLibDirPath = "$intermedLibDirPath/stripped_native_libs/${buildTypeName}/out/lib"
    // Prepare output dir path
    def intermedAppDirPath = "$project.buildDir.absolutePath/intermediates/"
    // <module>/build/intermediates/stripped_native_libs/<variant>/out/lib
    def strippedAppDirPath = "$intermedAppDirPath/stripped_native_libs/$variant.name/out/lib"

    def copyExecsTask = tasks.create(name: "unzenCopyExecs${variantName}", type: Copy) {
        from strippedLibDirPath
        into strippedAppDirPath
        variant.productFlavors.get(0).abis.each { abi ->
            include "$abi/execbar"
            include "$abi/execbaz"
        }
        // On debug app builds Android OS installs from APK arbitrary named binaries,
        // but on release build it ignores everything except files named like SO libs.
        rename '(.+)', 'lib$1.so'
        includeEmptyDirs = false
    }
    project.tasks["strip${variantName}DebugSymbols"].finalizedBy(copyExecsTask)

    variant.outputs.all { output ->
        outputFileName = "cppexec-${variant.versionName}.apk"
    }
}

gradle.taskGraph.afterTask { task ->
    // Prints all tasks info, inputs and outputs
    if (true) {
        return
    }
    // Allows to print only tasks that match some criteria
    boolean hit = true
    StringBuffer taskInfo = new StringBuffer()
    boolean verbose = false
    if (verbose) {
        taskInfo << "Unzen task info:"
        taskInfo << " $task.name, $task.group, $task.description"
        taskInfo << ", $task.convention.plugins"
    }
    task.dependsOn.forEach { dep ->
        taskInfo << "\nD: " + dep
    }
    task.inputs.eachWithIndex { it, i ->
        if (it instanceof File) {
            if (it.absolutePath.contains("java_res")) {
                hit = true
            }
            taskInfo << "\nI: ${it.absolutePath}"
        } else {
            taskInfo << "\nI: ${it}"
        }
    }
    task.outputs.files.eachWithIndex { it, i ->
        if (it instanceof File) {
            if (it.absolutePath.contains("java_res")) {
                hit = true
            }
            taskInfo << "\nO: ${it.absolutePath}"
        } else {
            taskInfo << "\nO: ${it}"
        }
    }
    if (hit) {
        println taskInfo
    }
}

task alephCopyApks(type: Copy) {
    group = "aleph"
    from "build/outputs/apk/fat/debug"
    from "build/outputs/apk/fat/release"
    from "build/outputs/apk/a32/release"
    from "build/outputs/apk/a64/release"
    from "build/outputs/apk/x32/release"
    from "build/outputs/apk/x64/release"
    include "*.apk"
    into "$rootDir.absolutePath/apks"
}
assemble.finalizedBy alephCopyApks

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':lib-cuscuta')
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test:runner:1.3.0'
}
